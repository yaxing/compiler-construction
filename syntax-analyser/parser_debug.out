registering parser_test
registered parser_test at 0
registering i
registered i at 1
registering j
registered j at 2
registering num
registered num at 3
IdList
IdListM
IdList
IdListM
IdList
registering integer
id integer is predefined-type at 23
TypeID
VarDecl
setting: 3 23
setting: 2 23
setting: 1 23
VarDeclList
VarDecl_Mul
registering divides
registered divides at 4
scope changed to: 4
registering x
registered x at 1
registering y
registered y at 2
IdList
IdListM
IdList
registering integer
id integer is predefined-type at 23
TypeID
Plist_single
setting: 2 23
setting: 1 23
FormalPList
registering boolean
id boolean is predefined-type at 25
ResultType
setting func: 4 2
scope changed to: -1
Address: 0   ID: parser_test     Type: (null)     
Address: 1   ID: i               Type: integer    
Address: 2   ID: j               Type: integer    
Address: 3   ID: num             Type: integer    
Address: 4   ID: divides         Type: function   ParamQty: 2 ReturnType: boolean   


scope changed to: 4
set func: 4 in scope 4
registering divides
registered divides at 0
Var
checking var 0 divides
checking 0
Address: 0   ID: divides         Type: boolean    
Address: 1   ID: x               Type: integer    
Address: 2   ID: y               Type: integer    


registering y
registered y at 2
Var
checking var 2 y
checking 2
Address: 0   ID: divides         Type: boolean    
Address: 1   ID: x               Type: integer    
Address: 2   ID: y               Type: integer    


Factor_Var
Term_Fac_Mul
AddOpTerm_Single
SimpleExp_AddTerm
RelationalOp_EQ
registering x
registered x at 1
Var
checking var 1 x
checking 1
Address: 0   ID: divides         Type: boolean    
Address: 1   ID: x               Type: integer    
Address: 2   ID: y               Type: integer    


Factor_Var
MulOp_MUL
registering y
registered y at 2
Var
checking var 2 y
checking 2
Address: 0   ID: divides         Type: boolean    
Address: 1   ID: x               Type: integer    
Address: 2   ID: y               Type: integer    


Factor_Var
MulOp_DIV
registering x
registered x at 1
Var
checking var 1 x
checking 1
Address: 0   ID: divides         Type: boolean    
Address: 1   ID: x               Type: integer    
Address: 2   ID: y               Type: integer    


Factor_Var
Term_Fac_Mul
MulOpTerm
Term_Fac_Mul
AddOpTerm_Single
SimpleExp_AddTerm
Exp_simp
Factor_Exp
Term_Fac_Mul
MulOpTerm
Term_Fac_Mul
AddOpTerm_Single
SimpleExp_AddTerm
Exp_Simp_Ro
AssiState
SimpleS_AssignState
Statement_Simple
SteS
CompStBE
Block_CompState
PFDecl_Block
FuncDecl
scope changed to: -1
SubDeclF
registering mul
registered mul at 5
scope changed to: 5
registering x
registered x at 1
registering y
registered y at 2
IdList
IdListM
IdList
registering integer
id integer is predefined-type at 23
TypeID
Plist_single
setting: 2 23
setting: 1 23
FormalPList
registering boolean
id boolean is predefined-type at 25
ResultType
setting func: 5 2
scope changed to: -1
Address: 0   ID: parser_test     Type: (null)     
Address: 1   ID: i               Type: integer    
Address: 2   ID: j               Type: integer    
Address: 3   ID: num             Type: integer    
Address: 4   ID: divides         Type: function   ParamQty: 2 ReturnType: boolean   
Address: 5   ID: mul             Type: function   ParamQty: 2 ReturnType: boolean   


scope changed to: 5
set func: 5 in scope 5
registering divides
registered divides at 3
Var
checking var 3 divides
checking 3
Address: 0   ID: mul             Type: boolean    
Address: 1   ID: x               Type: integer    
Address: 2   ID: y               Type: integer    
Address: 3   ID: divides         Type: (null)     


