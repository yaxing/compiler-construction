registering errormulti
registered errormulti at 0
registering s
registered s at 1
registering string
id string is predefined-type at 4
TypeID
handling type: string
constructed TypeInfo(pred) as 4 from string(4)
All symboltables: 
symboltable of scope -1 (sub-scope of -1): 
Address: 0   ID: errormulti      Type: (null)     
Address: 1   ID: s               Type: (null)     

TypeDef: id: 1 type: 4 tag: 0
registering in
registered in at 2
registering integer
id integer is predefined-type at 0
TypeID
handling type: integer
constructed TypeInfo(pred) as 0 from integer(0)
All symboltables: 
symboltable of scope -1 (sub-scope of -1): 
Address: 0   ID: errormulti      Type: (null)     
Address: 1   ID: s               Type: string     Attr: type 
Address: 2   ID: in              Type: (null)     

TypeDef: id: 2 type: 0 tag: 0
TypeDefList
TypeDefList_Multi
TypeDef_Mul
registering z
registered z at 3
IdList
registering s
registered s at 1
TypeID
handling type: s
checking type s in cur scope -1
constructed TypeInfo(normal) as 4 from s(1) string
All symboltables: 
symboltable of scope -1 (sub-scope of -1): 
Address: 0   ID: errormulti      Type: (null)     
Address: 1   ID: s               Type: string     Attr: type 
Address: 2   ID: in              Type: integer    Attr: type 
Address: 3   ID: z               Type: (null)     

VarDecl
setting idlist
setting: 3 4
set idlist
registering m
registered m at 4
IdList
registering in
registered in at 2
TypeID
handling type: in
checking type in in cur scope -1
constructed TypeInfo(normal) as 0 from in(2) integer
All symboltables: 
symboltable of scope -1 (sub-scope of -1): 
Address: 0   ID: errormulti      Type: (null)     
Address: 1   ID: s               Type: string     Attr: type 
Address: 2   ID: in              Type: integer    Attr: type 
Address: 3   ID: z               Type: string     Attr: var 
Address: 4   ID: m               Type: (null)     

VarDecl
setting idlist
setting: 4 0
set idlist
registering z
registered z at 3
IdList
registering in
registered in at 2
TypeID
handling type: in
checking type in in cur scope -1
constructed TypeInfo(normal) as 0 from in(2) integer
All symboltables: 
symboltable of scope -1 (sub-scope of -1): 
Address: 0   ID: errormulti      Type: (null)     
Address: 1   ID: s               Type: string     Attr: type 
Address: 2   ID: in              Type: integer    Attr: type 
Address: 3   ID: z               Type: string     Attr: var 
Address: 4   ID: m               Type: integer    Attr: var 

VarDecl
setting idlist
setting: 3 0
set idlist
VarDeclList
VarDeclList_Mul
VarDeclList_Mul
VarDecl_Mul
registering z
registered z at 3
Var_ID
checking var 3 z
checking 3 in scope -1 (-1)
Address: 0   ID: errormulti      Type: (null)     
Address: 1   ID: s               Type: string     Attr: type 
Address: 2   ID: in              Type: integer    Attr: type 
Address: 3   ID: z               Type: integer    Attr: var 
Address: 4   ID: m               Type: integer    Attr: var 

var id: z
Var_Comp
constructed TypeInfo(normal) as 0 from z(3) integer
var type: 0
Factor_INT
type reduced as 0
AddOpTerm_Single
type reduced as 0
SimpleExp_AddTerm
type reduced as 0
Exp_simp
type reduced as 0
AssiState
assign var type: 0
type checking: 0 0
SimpleS_AssignState
Statement_Simple
SteS
registering m
registered m at 4
Var_ID
checking var 4 m
checking 4 in scope -1 (-1)
Address: 0   ID: errormulti      Type: (null)     
Address: 1   ID: s               Type: string     Attr: type 
Address: 2   ID: in              Type: integer    Attr: type 
Address: 3   ID: z               Type: integer    Attr: var 
Address: 4   ID: m               Type: integer    Attr: var 

var id: m
Var_Comp
constructed TypeInfo(normal) as 0 from m(4) integer
var type: 0
Factor_INT
type reduced as 0
AddOpTerm_Single
type reduced as 0
SimpleExp_AddTerm
type reduced as 0
Exp_simp
type reduced as 0
AssiState
assign var type: 0
type checking: 0 0
SimpleS_AssignState
Statement_Simple
SteSSte
Statement_Simple
SteSSte
CompStBE
Program
