registering errorfree
registered errorfree at 0
registering s
registered s at 1
registering string
id string is predefined-type at 4
TypeID 4
handling type: string
constructed TypeInfo(pred) as 4 from string(4)
All symboltables: 
symboltable of scope -1 (sub-scope of -1): 
Address: 0   ID: errorfree       Type: (null)     
Address: 1   ID: s               Type: (null)     

TypeDef: id: 1 type: 4 tag: 0
registering in
registered in at 2
registering integer
id integer is predefined-type at 0
TypeID 0
handling type: integer
constructed TypeInfo(pred) as 0 from integer(0)
All symboltables: 
symboltable of scope -1 (sub-scope of -1): 
Address: 0   ID: errorfree       Type: (null)     
Address: 1   ID: s               Type: string     Attr: type 
Address: 2   ID: in              Type: (null)     

TypeDef: id: 2 type: 0 tag: 0
TypeDefList
TypeDefList_Multi
TypeDef_Mul
registering z
registered z at 3
IdList
registering string
id string is predefined-type at 4
TypeID 4
handling type: string
constructed TypeInfo(pred) as 4 from string(4)
All symboltables: 
symboltable of scope -1 (sub-scope of -1): 
Address: 0   ID: errorfree       Type: (null)     
Address: 1   ID: s               Type: string     Attr: type 
Address: 2   ID: in              Type: integer    Attr: type 
Address: 3   ID: z               Type: (null)     

VarDecl
setting idlist
setting: 3 4
set idlist
registering m
registered m at 4
IdList
registering in
registered in at 2
TypeID 2
handling type: in
checking type in in cur scope -1
constructed TypeInfo(normal) as 0 from in(2) integer
All symboltables: 
symboltable of scope -1 (sub-scope of -1): 
Address: 0   ID: errorfree       Type: (null)     
Address: 1   ID: s               Type: string     Attr: type 
Address: 2   ID: in              Type: integer    Attr: type 
Address: 3   ID: z               Type: string     Attr: var 
Address: 4   ID: m               Type: (null)     

VarDecl
setting idlist
setting: 4 0
set idlist
VarDeclList
VarDeclList_Mul
VarDecl_Mul
registering foo
registered foo at 5
scope changed to: 5
registering a
registered a at 1
IdList
registering in
registered in at 2
TypeID 2
handling type: in
checking type in in cur scope 5
checking type in in scope -1
constructed TypeInfo(normal) as 0 from in(2) integer
All symboltables: 
symboltable of scope -1 (sub-scope of -1): 
Address: 0   ID: errorfree       Type: (null)     
Address: 1   ID: s               Type: string     Attr: type 
Address: 2   ID: in              Type: integer    Attr: type 
Address: 3   ID: z               Type: string     Attr: var 
Address: 4   ID: m               Type: integer    Attr: var 
Address: 5   ID: foo             Type: (null)     

Plist_single
setting idlist
setting: 1 0
set idlist
FormalPList
registering in
registered in at 2
ResultType
handling type: in
checking type in in cur scope 5
checking type in in scope -1
constructed TypeInfo(normal) as 0 from in(2) integer
return type: 0
setting func: 5 1 0
set func var integer
Address: 0   ID: foo             Type: integer    Attr: var 
Address: 1   ID: a               Type: integer    Attr: var 

scope changed to: -1
set func: 5 in scope -1
scope changed to: 5
registering a
registered a at 1
Var_ID
checking var 1 a
checking 1 in scope 5 (-1)
Address: 0   ID: foo             Type: integer    Attr: var 
Address: 1   ID: a               Type: integer    Attr: var 

var id: a
Var_Comp
constructed TypeInfo(normal) as 0 from a(1) integer
var type: 0
registering a
registered a at 1
Var_ID
checking var 1 a
checking 1 in scope 5 (-1)
Address: 0   ID: foo             Type: integer    Attr: var 
Address: 1   ID: a               Type: integer    Attr: var 

var id: a
Var_Comp
constructed TypeInfo(normal) as 0 from a(1) integer
var type: 0
Factor_Var
type reduced as 0
AddOp_Add
Factor_INT
type reduced as 0
AddOpTerm_Single
type reduced as 0
AddOpTerm_Mul
type checking: 0 0
reduce as type: 0
type reduced as 0
SimpleExp_AddTerm
type reduced as 0
Exp_simp
type reduced as 0
AssiState
assign var type: 0
type checking: 0 0
SimpleS_AssignState
Statement_Simple
SteS
registering foo
registered foo at 0
Var_ID
checking var 0 foo
checking 0 in scope 5 (-1)
Address: 0   ID: foo             Type: integer    Attr: var 
Address: 1   ID: a               Type: integer    Attr: var 

var id: foo
Var_Comp
constructed TypeInfo(normal) as 0 from foo(0) integer
var type: 0
registering a
registered a at 1
Var_ID
checking var 1 a
checking 1 in scope 5 (-1)
Address: 0   ID: foo             Type: integer    Attr: var 
Address: 1   ID: a               Type: integer    Attr: var 

var id: a
Var_Comp
constructed TypeInfo(normal) as 0 from a(1) integer
var type: 0
Factor_Var
type reduced as 0
AddOpTerm_Single
type reduced as 0
SimpleExp_AddTerm
type reduced as 0
Exp_simp
type reduced as 0
AssiState
assign var type: 0
type checking: 0 0
SimpleS_AssignState
Statement_Simple
SteSSte
CompStBE
Block_CompState
PFDecl_Block
FuncDecl
scope changed to: -1
SubDeclF
SubDecl_Mul
registering z
registered z at 3
Var_ID
checking var 3 z
checking 3 in scope -1 (-1)
Address: 0   ID: errorfree       Type: (null)     
Address: 1   ID: s               Type: string     Attr: type 
Address: 2   ID: in              Type: integer    Attr: type 
Address: 3   ID: z               Type: string     Attr: var 
Address: 4   ID: m               Type: integer    Attr: var 
Address: 5   ID: foo             Type: function   ParamQty: 1 ReturnType: integer   

var id: z
Var_Comp
constructed TypeInfo(normal) as 4 from z(3) string
var type: 4
registering foo
registered foo at 5
registering z
registered z at 3
Var_ID
checking var 3 z
checking 3 in scope -1 (-1)
Address: 0   ID: errorfree       Type: (null)     
Address: 1   ID: s               Type: string     Attr: type 
Address: 2   ID: in              Type: integer    Attr: type 
Address: 3   ID: z               Type: string     Attr: var 
Address: 4   ID: m               Type: integer    Attr: var 
Address: 5   ID: foo             Type: function   ParamQty: 1 ReturnType: integer   

var id: z
Var_Comp
constructed TypeInfo(normal) as 4 from z(3) string
var type: 4
Factor_Var
type reduced as 4
AddOpTerm_Single
type reduced as 4
SimpleExp_AddTerm
type reduced as 4
Exp_simp
type reduced as 4
ActualParamL
ProFuncStat
checking 5 in scope -1 (-1)
Address: 0   ID: errorfree       Type: (null)     
Address: 1   ID: s               Type: string     Attr: type 
Address: 2   ID: in              Type: integer    Attr: type 
Address: 3   ID: z               Type: string     Attr: var 
Address: 4   ID: m               Type: integer    Attr: var 
Address: 5   ID: foo             Type: function   ParamQty: 1 ReturnType: integer   

checking func/proc 5 foo
constructed TypeInfo as 0(tag: 1) from entry a(integer)
type checking: 4 0
actual types: 4 0
constructed TypeInfo(normal) as 7 from foo(5) function
Factor_FuncRef
type reduced as 7
AddOpTerm_Single
type reduced as 7
SimpleExp_AddTerm
type reduced as 7
Exp_simp
type reduced as 7
AssiState
assign var type: 4
type checking: 4 7
actual types: 4 0
SimpleS_AssignState
Statement_Simple
SteS
registering m
registered m at 4
Var_ID
checking var 4 m
checking 4 in scope -1 (-1)
Address: 0   ID: errorfree       Type: (null)     
Address: 1   ID: s               Type: string     Attr: type 
Address: 2   ID: in              Type: integer    Attr: type 
Address: 3   ID: z               Type: string     Attr: var 
Address: 4   ID: m               Type: integer    Attr: var 
Address: 5   ID: foo             Type: function   ParamQty: 1 ReturnType: integer   

var id: m
Var_Comp
constructed TypeInfo(normal) as 0 from m(4) integer
var type: 0
registering z
registered z at 3
Var_ID
checking var 3 z
checking 3 in scope -1 (-1)
Address: 0   ID: errorfree       Type: (null)     
Address: 1   ID: s               Type: string     Attr: type 
Address: 2   ID: in              Type: integer    Attr: type 
Address: 3   ID: z               Type: string     Attr: var 
Address: 4   ID: m               Type: integer    Attr: var 
Address: 5   ID: foo             Type: function   ParamQty: 1 ReturnType: integer   

var id: z
Var_Comp
constructed TypeInfo(normal) as 4 from z(3) string
var type: 4
Factor_Var
MulOp_MUL
Factor_INT
type reduced as 0
MulOpTerm
Term_Fac_Mul
type checking: 4 0
actual types: 4 0
reduce as type: 4
type reduced as 4
AddOpTerm_Single
type reduced as 4
SimpleExp_AddTerm
type reduced as 4
Exp_simp
type reduced as 4
AssiState
assign var type: 0
type checking: 0 4
actual types: 0 4
SimpleS_AssignState
Statement_Simple
SteSSte
CompStBE
Program
